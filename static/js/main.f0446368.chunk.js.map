{"version":3,"sources":["components/Card.js","components/CardList.js","SearchBox.js","components/Scroll.js","components/Loading.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","searchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","Loading","ErrorBoundry","state","hasError","error","info","this","setState","hasEroor","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLocaleLowerCase","includes","length","SearchBox","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"8MAeeA,EAbF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAEzB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,eACpD,6BACI,4BAAKL,GACL,2BAAIC,MCqBLK,EA3BE,SAAC,GAGX,IADHC,EACE,EADFA,OAEA,OAAS,iCACDA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAO,kBAAC,EAAD,CACPC,IACID,EAEJR,GACIK,EAAOG,GAAGR,GAEdF,KACIO,EAAOG,GAAGV,KAEdC,MACIM,EAAOG,GAAGT,aCDfW,EAjBG,YAA+B,EAA7BA,UAA8B,IAAnBC,EAAkB,EAAlBA,aAC3B,OACI,yBAAKV,UAAU,OAEf,2BAEAA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAYH,MCDLI,G,MAPA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEJ,EAAMK,YCwBAC,EAVC,SAAC,GAAQ,EAAPd,EAEd,OACA,6BACA,yBAAKP,UAAU,aCAJsB,E,kDArBX,WAAYP,GAAQ,IAAD,8BACf,cAAMA,IACDQ,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAKzB,OAAIG,KAAKJ,MAAMM,SACJ,0DAEJF,KAAKZ,MAAMK,a,GAjBCU,aC6DZC,E,kDAjDX,aAAe,IAAD,8BACV,gBAgBJC,eAAiB,SAACC,GACd,EAAKL,SAAS,CAACM,YAAaD,EAAME,OAAOC,SAhBzC,EAAKb,MAAQ,CACTnB,OAAQ,GACR8B,YAAa,IAJP,E,gEAQO,IAAD,OAChBG,MAAM,6CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKb,SAAS,CAACxB,OAAQqC,S,+BAUjC,IAAD,EACyBd,KAAKJ,MAA5BnB,EADF,EACEA,OAAQ8B,EADV,EACUA,YACTQ,EAAiBtC,EAAOuC,QAAO,SAAAC,GACjC,OAAOA,EAAM/C,KAAKgD,oBAAoBC,SAASZ,EAAYW,wBAG/D,OAAQzC,EAAO2C,OAIX,yBAAK/C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAACgD,EAAD,CAAWtC,aAAciB,KAAKK,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACQ,kBAAC,EAAD,CAAU5B,OAAQsC,OATV,kBAAC,EAAD,U,GA7BdZ,aCAEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLwC,QAAQxC,MAAMA,EAAMyC,a","file":"static/js/main.f0446368.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ name, email, id }) => {\n    //const { name, email, id } = props;\n    return (\n        <div className=\"tc bg-light-green dib br3 pd3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"Some image\"/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({\n    \n    robots\n}) => {\n    return ( <div > {\n            robots.map((user, i) => {\n                return <Card\n                key = {\n                    i\n                }\n                id = {\n                    robots[i].id\n                }\n                name = {\n                    robots[i].name\n                }\n                email = {\n                    robots[i].email\n                }\n                />\n            })\n        }\n\n        <\n        /div>\n    )\n}\nexport default CardList","import React from \"react\";\n\nconst searchBox = ({searchBox, searchChange}) => {\n    return (\n        <div className=\"pa2\">\n\n        <input \n\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\" \n        placeholder=\"Search robots\"\n        onChange = {searchChange}\n\n        />\n\n        </div>\n    )\n}\n\nexport default searchBox;","import React from \"react\";\n\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflow: \"scroll\", border: \"3px solid black\", height: \"800px\"}}>\n        {props.children}\n        </div>\n    )\n};\nexport default Scroll;\n\n","import React from \"react\";\nimport loader from \"../index.css\"\n\n //function sleep(ms) {\n   //  return new Promise(resolve => setTimeout(resolve, ms));\n  // }\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\nconst Loading = ({i}) => {\n    const message = \"LOADING\";\n    return (\n    <div>\n    <div className=\"loader\"></div>\n    {/* // <div className=\"tc\"> <h1>{message[i]}</h1> */}\n    </div>\n    )\n}\n\nexport default Loading;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const CardList = ({\n//     robots\n// }) => {\n\n\n//     return ( <\n//         div > {\n//             robots.map((user, i) => {\n//                 return <Card\n//                 key = {\n//                     i\n//                 }\n//                 id = {\n//                     robots[i].id\n//                 }\n//                 name = {\n//                     robots[i].name\n//                 }\n//                 email = {\n//                     robots[i].email\n//                 }\n//                 />\n//             })\n//         }\n\n//         <\n//         /div>\n//     )\n// }","import React, {Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        };\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true})\n    }\n\n\n    render() {\n        if (this.state.hasEroor) {\n            return <h1> Oooops. This is not good </h1>\n        }\n        return this.props.children\n    }\n\n}\n\nexport default ErrorBoundry","import React, {Component} from \"react\";\nimport CardList from \"../components/CardList\";\n//import { robots } from \"./robots\";\nimport SearchBox from \"../SearchBox\";\nimport \"./App.css\";\n// import { robots } from \"../robots\";\nimport Scroll from \"../components/Scroll\"\nimport Loading from \"../components/Loading\";\nimport ErrorBoundry from \"../components/ErrorBoundry\"\n\n\n\nclass App extends Component {\n\n    constructor() {\n        super() //means state\n        this.state = {\n            robots: [],\n            searchField: \"\"\n        }\n    }\n\n    componentDidMount() {\n        fetch(\"http://jsonplaceholder.typicode.com/users\")\n        .then(response => response.json())\n        .then(users => {this.setState({robots: users})});\n      // .then(users => {});\n      //  this.setState({robots : robots})\n    }\n    // Automatically called\n\n    onSearchChange = (event) => {\n        this.setState({searchField: event.target.value})\n\n    }\n    render() {\n        const {robots, searchField} = this.state;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase())\n        })\n        \n        return !robots.length ? <Loading />\n           // robots.length === 0\n           // return <Loading i={i}/> \n           :  \n            <div className=\"tc\">\n                <h1 className=\"f2\">Robofriends</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                <ErrorBoundry>\n                        <CardList robots={filteredRobots}/>\n                </ErrorBoundry>\n                </Scroll>\n        \n            </div>}}\n\n\n    \n\n\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import Card from './Card';\nimport App from \"./containers/App\";\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\n// after default you must destrcture!\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}